[
  {
    "objectID": "DM.html",
    "href": "DM.html",
    "title": "DM",
    "section": "",
    "text": "J’attends vos rendus le 20/11/2023. Les retards seront pénalisés (-2 points par semaine de retard)!\nVous pouvez me fournir un rendu par groupe\n\nen m’indiquant (en quelques lignes) comment vous avez réparti les tâches et de quelle manière vous avez investi tel ou tel aspect\nen m’indiquant si vous souhaitez avoir une note commune pour ce travail ou une note individuelle\n\nIl faudra donc a minima que vous atteigniez un consensus sur cette partie “qui a fait quoi”, et s’il y en a ne serait-ce qu’un seul qui souhaite la notation individualisée dans le groupe alors c’est son avis qui prévaudra! (Oui c’est un peu compliqué: l’idée, comme vous l’aurez sans doute compris, c’est que personne ne se laisse passivement porter par les autres dans les groupes…)\nJ’attends que vous me fournissiez à la fois:\n\nle document Rmarkdown (qui, de fait, me permettra de voir l’intégralité des lignes de commande que vous aurez écrit)\nle rapport “tricoté” (i.e. le fichier .doc, .html, ou .pdf selon vos préférences).\n\nDe ce fait, vous pouvez, si vous le souhaitez, ne pas me montrer les lignes de commandes dans le rapport pour faire “comme si” j’étais un interlocuteur qui ne connaît pas le langage et s’intéresse juste aux résultats…\nSi vous me montrez des tableaux de données intermédiaires, essayez de me montrer seulement quelques lignes, ou leurs dimensions, pas des tableaux énormes qui vont générer 10 pages de rapport pour pas grand chose…\nEnfin, ne soyez pas trop scolaires… Prenez cet exercice comme une “simulation” de rapport qu’on vous demanderait de produire dans le cadre d’un stage ou de votre travail… Je veux dire par là que vous avez le droit d’utiliser des fonctions autres que celles que je vous ai montrées, de faire des choses en plus par rapport à ce que je vous demande (pas en moins SVP :-p ), d’organiser le rapport pour que la progression soit la plus logique possible, etc. La description étape par étape que je vous indique n’est en effet là que pour vous aider dans votre progression (et pour assurer que vous révisiez bien différents aspects abordés dans le cours…), pas pour brimer votre imagination…\n\nVous allez travailler sur des données de la base Sirene de l’INSEE, mise à disposition sur data.gouv.fr, et qui répertorie l’ensemble des entreprises et établissements actifs en France. Les métadonnées associées à cette base sont en partie décrites dans ce tableau.\n\n\n\n\n\n\nSi besoin, installez R et RStudio\nTéléchargez les données du département 42, geo_siret_42.csv dans ce répertoire\nTéléchargez la table qui renseigne les codes correspondant à l’Activité Principale de l’Etablissement (APE)APE_Type.csv\n\n\n\n\n\nDepuis RStudio, créez un projet qui comprendra l’ensemble des données et documents nécessaires à réaliser l’ensemble des traitements qui vous seront demandés pour ce TP.\nCréez le data.frame data42 en lisant la table geo-siret_42.csv.\nCréez l’objet APE_Type en lisant le fichier relatif aux codes d’APE.\n\n\n\n\n👁 Consultez ce billet de blog sur la manipulation de chaînes de caractères avec R et le package stringr\n\nCombien d’entreprises ont un nom (enseigne1Etablissement) qui comprend le terme “BOULANGERIE”?\nAjoutez une variable Code à votre table en ne conservant que les quatre premiers caractères de la variable activitePrincipaleEtablissement (cela correspond à un pattern “^….”, à savoir le début de chaîne de caractère suivi de quatre caractères quelconques -cf ce billet de blog sur les expressions régulières-).\nFiltrez les lignes de data42 pour ne retenir que celles pour lesquelles l’APE correspond aux commerces “alimentaires” -alimentation, boisson, restaurant, bar- (voir la liste contenue dans le fichier APE_Type)\nStockez le résultat de ces opérations dans un objet alim42.\n👁 Allez jeter un coup d’oeil ici pour comprendre comment le principe et la réalisation des jointures à l’aide du package dplyr.Réalisez une jointure entre data42_alim (variable codeAPE) et APE_Type (variable Code), de manière à compléter alim42 avec les types de commerces (variables Type et TypeAbreg).\n\n\n\n\n\nQuelles sont les 3 communes de votre base de données qui comptent le plus de magasins alimentaires?\nPour les communes qui ne comptent qu’un seul commerce “alimentaire”, de quel type est-il, le plus fréquemment?\nQuelles communes de plus de 100 commerces comptent au moins 10 commerces de type “viande”?\n\n\n\n\n\nA ce stade, votre script commence à être un peu long et (peut-être) un peu désordonné… Ne serait-ce pas plus agréable de continuer votre projet sous la forme d’un rapport Rmarkdown? (Ne répondez pas à cette question, elle est rhétorique…).\n\nCréez un document ____.Rmd, structurez-le avec quelques titres, et répartissez les différents morceaux de code de votre script de manière pertinente dans différents chunks.\nVous pouvez maintenant rédiger des paragraphes en y intégrant des éléments de réponses aux questions posées précédemment. Rédigez un petit paragraphe pour nommer les 3 communes qui comptent le plus d’entreprises (exercice précédent) en utilisant l’insertion d’“inline chunks”.\n\nA partir de maintenant, votre document de travail sera un document`___.Rmd’ et non le script que vous avez créé initialement…\n\n\n\n\n\n\nPour obtenir la table alim42, vous avez réalisé un certain nombre d’opérations. On voudrait réaliser l’ensemble de ces opérations pour les 5 départements suivants:\n\nl’Ain (01)\nl’Isère (38)\nla Loire (42)\nla Haute-Loire (43)\nle Rhône (69)\n\nRéutilisez les commandes que vous avez mises au point sur data42 pour écrire une fonction get_clean_data() qui réalisera l’ensemble de ces opérations sur le département de votre choix. L’input correspondra à un numéro de département (c’est-à-dire que vous pourrez utiliser la fonction en faisant, par exemple get_clean_data(\"01\")).\n💬 Pour lire le fichier, il faudra indiquer son chemin… Pensez à réutiliser ce que vous venez d’apprendre sur les chaînes de caractères pour reformer le chemin du fichier que vous intéresse à partir du numéro de département…\nCertaines chaînes de caractère sont interprétées comme des chaînes de caractère pour certains jeux de données (par exemple pour les codes postaux de l’Ain, à cause du “0” en début de chaîne) tandis qu’elle est interprétée comme un numérique pour les autres jeux de données. Faites en sorte que votre fonction transforme bien cette variable pour qu’elles soient toujours de classe “character” en sortie (conversion par as.character()…).\n\n\n\nAppelez cette fonction de manière itérative pour chacun des départements cités ci-dessus. Vous pouvez pour ce faire soit écrire une boucle for, soit utiliser la fonction map() du package purrr.\n\nA partir des 5 jeux de données obtenus vous créerez un seul et même jeu de données alimRA_entr (données pour l’ancienne région Rhône-Alpes, où 1 ligne=1 entreprise).\n\n💬 Vous pourrez si vous le souhaitez vous servir de la commande bind_rows().\nExemple:\n\nma_liste\n\n[[1]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 pouet    33  0.22\n\n[[2]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 tut      56  0.18\n\n[[3]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 cot      11  0.16\n\ndplyr::bind_rows(ma_liste)\n\n# A tibble: 3 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 pouet    33  0.22\n2 tut      56  0.18\n3 cot      11  0.16\n\n\n\nRajoutez une variable departement (correspondant au numéro de département) à votre jeu de données alimRA_entr. Peut-être par des manipulations sur le code postal?…\n\n\n\n\nVous avez dû remarquer que l’exécution de l’étape précédente prenait un peu de temps car les 5 fichiers geo-sirene lus sont très volumineux… En revanche la table alimRA_entr est de taille beaucoup plus raisonnable. Or, nous n’aurons besoin que de cette table pour la suite du projet. Pour éviter d’exécuter cette étape chronophage à chaque fois que vous travaillerez sur ce projet:\n\nexportez alimRA_entr dans un fichier alimRA_entr.csv.\nentourez la boucle for d’une structure conditionnelle if de sorte que la boucle ne soit exécutée que si le fichier alimRA_entr.csv n’existe pas (voir fonction file.exists()…)\nécrivez à la suite la commande qui servira à lire alimRA_entr.csv à chaque “tricotage” de votre rapport Rmarkdown.\n\n\n\n\n\n\n\n\nAgrégez la table alimRA_entr par commune et type de commerce, pour créer une table alimRA_typeCom(où une ligne correspondra à un type de commerce pour une commune):\n\nune variable nInCom correspondant au nombre de commerces par commune\nune variable nInTypeCom correspondant au nombre de commerces par type et commune\nune variable propInTypeCom correspondant à la proportion d’un type de commerce dans une commune\nQuelles communes comptant plus de 100 commerces comptes au moins 5% de commerces de type “viande”?\n\n\n\n\nRéalisez un graphique montrant les proportions des différents types de commerces pour LYON 4EME et LYON 8EME.\n\n\n\n\n\n\n\nNous allons nous intéresser aux dates de création des entreprises de notre base alimRA_entr (variable dateCreationEtablissement).\n💬 Pour le moment, dateCreationEtablissement est considéré comme une variable de type “chaîne de caractères”. Pour faire comprendre à R qu’il s’agit en réalité d’une date (et lui faire comprendre comment elle est mise en forme) nous allons faire appel au package lubridate.\n👁 Consultez ce billet de blog ou la vignette du package lubridate, qui explique succintement comment utiliser ce package.\n\nInstallez et chargez le package lubridate.\nTransformez le tableau alimRA_entr en modifiant la classe de dateCreationEtablissement à l’aide d’une fonction de lubridate.\nAjoutez une variable annee au tableau alimRA_entr à l’aide, à nouveau, d’une des fonctions de lubridate.\n\n\n\n\n\nCréez une table alimRA_typeAn qui recense le **nombre d’entreprises par année (nInAn), et par type*année (nInTypeAn)**.\nFiltrez les données de alimRA_typeAn pour ne garder que les entreprises dont la création correspond aux années &gt;=1970.\n\n\n\n\n\nInstallez et chargez le package ggplot2\nRéalisez un graphique représentant l’évolution des proportions d’entreprises (par type) par année.\nRéalisez ce même graphique, mais en représentant le nombre de créations d’entreprises par année et par type, pour les 5 types comptant le plus de créations d’entreprises (au total).\n\n\n\n\n\n\n\n\n\nRepartez de la table alim_entr pour en faire un objet de classe “sf”. Vous vous servirez pour cela des colonnes “longitude” et “latitude” et exclurez les entreprises pour lesquelles ces colonnes ne sont pas renseignées.\nRéalisez une carte montrant le semis de points correspondant aux boulangeries-pâtisseries.\nEssayez de représenter à travers cette carte l’année de création de l’entreprise (de la manière qui vous semblera la plus pertinente).\n\n\n\n\n\nTéléchargez le shapefile des limites de communes en France ici et filtrez pour ne garder que les départements considérés ci-dessus.\nJoignez aux communes les informations concernant les commerces (st_join()…) et calculez le nombre de commerces par commune.\nProduisez une carte montrant le nombre de commerces par commune. Vous aurez sans doute à retravailler l’échelle colorée…"
  },
  {
    "objectID": "DM.html#mise_en_place",
    "href": "DM.html#mise_en_place",
    "title": "DM",
    "section": "",
    "text": "Si besoin, installez R et RStudio\nTéléchargez les données du département 42, geo_siret_42.csv dans ce répertoire\nTéléchargez la table qui renseigne les codes correspondant à l’Activité Principale de l’Etablissement (APE)APE_Type.csv\n\n\n\n\n\nDepuis RStudio, créez un projet qui comprendra l’ensemble des données et documents nécessaires à réaliser l’ensemble des traitements qui vous seront demandés pour ce TP.\nCréez le data.frame data42 en lisant la table geo-siret_42.csv.\nCréez l’objet APE_Type en lisant le fichier relatif aux codes d’APE.\n\n\n\n\n👁 Consultez ce billet de blog sur la manipulation de chaînes de caractères avec R et le package stringr\n\nCombien d’entreprises ont un nom (enseigne1Etablissement) qui comprend le terme “BOULANGERIE”?\nAjoutez une variable Code à votre table en ne conservant que les quatre premiers caractères de la variable activitePrincipaleEtablissement (cela correspond à un pattern “^….”, à savoir le début de chaîne de caractère suivi de quatre caractères quelconques -cf ce billet de blog sur les expressions régulières-).\nFiltrez les lignes de data42 pour ne retenir que celles pour lesquelles l’APE correspond aux commerces “alimentaires” -alimentation, boisson, restaurant, bar- (voir la liste contenue dans le fichier APE_Type)\nStockez le résultat de ces opérations dans un objet alim42.\n👁 Allez jeter un coup d’oeil ici pour comprendre comment le principe et la réalisation des jointures à l’aide du package dplyr.Réalisez une jointure entre data42_alim (variable codeAPE) et APE_Type (variable Code), de manière à compléter alim42 avec les types de commerces (variables Type et TypeAbreg).\n\n\n\n\n\nQuelles sont les 3 communes de votre base de données qui comptent le plus de magasins alimentaires?\nPour les communes qui ne comptent qu’un seul commerce “alimentaire”, de quel type est-il, le plus fréquemment?\nQuelles communes de plus de 100 commerces comptent au moins 10 commerces de type “viande”?"
  },
  {
    "objectID": "DM.html#rapport-statistiques-descriptives",
    "href": "DM.html#rapport-statistiques-descriptives",
    "title": "DM",
    "section": "",
    "text": "A ce stade, votre script commence à être un peu long et (peut-être) un peu désordonné… Ne serait-ce pas plus agréable de continuer votre projet sous la forme d’un rapport Rmarkdown? (Ne répondez pas à cette question, elle est rhétorique…).\n\nCréez un document ____.Rmd, structurez-le avec quelques titres, et répartissez les différents morceaux de code de votre script de manière pertinente dans différents chunks.\nVous pouvez maintenant rédiger des paragraphes en y intégrant des éléments de réponses aux questions posées précédemment. Rédigez un petit paragraphe pour nommer les 3 communes qui comptent le plus d’entreprises (exercice précédent) en utilisant l’insertion d’“inline chunks”.\n\nA partir de maintenant, votre document de travail sera un document`___.Rmd’ et non le script que vous avez créé initialement…"
  },
  {
    "objectID": "DM.html#program",
    "href": "DM.html#program",
    "title": "DM",
    "section": "",
    "text": "Pour obtenir la table alim42, vous avez réalisé un certain nombre d’opérations. On voudrait réaliser l’ensemble de ces opérations pour les 5 départements suivants:\n\nl’Ain (01)\nl’Isère (38)\nla Loire (42)\nla Haute-Loire (43)\nle Rhône (69)\n\nRéutilisez les commandes que vous avez mises au point sur data42 pour écrire une fonction get_clean_data() qui réalisera l’ensemble de ces opérations sur le département de votre choix. L’input correspondra à un numéro de département (c’est-à-dire que vous pourrez utiliser la fonction en faisant, par exemple get_clean_data(\"01\")).\n💬 Pour lire le fichier, il faudra indiquer son chemin… Pensez à réutiliser ce que vous venez d’apprendre sur les chaînes de caractères pour reformer le chemin du fichier que vous intéresse à partir du numéro de département…\nCertaines chaînes de caractère sont interprétées comme des chaînes de caractère pour certains jeux de données (par exemple pour les codes postaux de l’Ain, à cause du “0” en début de chaîne) tandis qu’elle est interprétée comme un numérique pour les autres jeux de données. Faites en sorte que votre fonction transforme bien cette variable pour qu’elles soient toujours de classe “character” en sortie (conversion par as.character()…).\n\n\n\nAppelez cette fonction de manière itérative pour chacun des départements cités ci-dessus. Vous pouvez pour ce faire soit écrire une boucle for, soit utiliser la fonction map() du package purrr.\n\nA partir des 5 jeux de données obtenus vous créerez un seul et même jeu de données alimRA_entr (données pour l’ancienne région Rhône-Alpes, où 1 ligne=1 entreprise).\n\n💬 Vous pourrez si vous le souhaitez vous servir de la commande bind_rows().\nExemple:\n\nma_liste\n\n[[1]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 pouet    33  0.22\n\n[[2]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 tut      56  0.18\n\n[[3]]\n# A tibble: 1 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 cot      11  0.16\n\ndplyr::bind_rows(ma_liste)\n\n# A tibble: 3 × 3\n  V1       V2    V3\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 pouet    33  0.22\n2 tut      56  0.18\n3 cot      11  0.16\n\n\n\nRajoutez une variable departement (correspondant au numéro de département) à votre jeu de données alimRA_entr. Peut-être par des manipulations sur le code postal?…\n\n\n\n\nVous avez dû remarquer que l’exécution de l’étape précédente prenait un peu de temps car les 5 fichiers geo-sirene lus sont très volumineux… En revanche la table alimRA_entr est de taille beaucoup plus raisonnable. Or, nous n’aurons besoin que de cette table pour la suite du projet. Pour éviter d’exécuter cette étape chronophage à chaque fois que vous travaillerez sur ce projet:\n\nexportez alimRA_entr dans un fichier alimRA_entr.csv.\nentourez la boucle for d’une structure conditionnelle if de sorte que la boucle ne soit exécutée que si le fichier alimRA_entr.csv n’existe pas (voir fonction file.exists()…)\nécrivez à la suite la commande qui servira à lire alimRA_entr.csv à chaque “tricotage” de votre rapport Rmarkdown."
  },
  {
    "objectID": "DM.html#résumé-par-commune-et-type-de-commerce",
    "href": "DM.html#résumé-par-commune-et-type-de-commerce",
    "title": "DM",
    "section": "",
    "text": "Agrégez la table alimRA_entr par commune et type de commerce, pour créer une table alimRA_typeCom(où une ligne correspondra à un type de commerce pour une commune):\n\nune variable nInCom correspondant au nombre de commerces par commune\nune variable nInTypeCom correspondant au nombre de commerces par type et commune\nune variable propInTypeCom correspondant à la proportion d’un type de commerce dans une commune\nQuelles communes comptant plus de 100 commerces comptes au moins 5% de commerces de type “viande”?\n\n\n\n\nRéalisez un graphique montrant les proportions des différents types de commerces pour LYON 4EME et LYON 8EME."
  },
  {
    "objectID": "DM.html#evolution-dans-le-temps-des-créations-dentreprise",
    "href": "DM.html#evolution-dans-le-temps-des-créations-dentreprise",
    "title": "DM",
    "section": "",
    "text": "Nous allons nous intéresser aux dates de création des entreprises de notre base alimRA_entr (variable dateCreationEtablissement).\n💬 Pour le moment, dateCreationEtablissement est considéré comme une variable de type “chaîne de caractères”. Pour faire comprendre à R qu’il s’agit en réalité d’une date (et lui faire comprendre comment elle est mise en forme) nous allons faire appel au package lubridate.\n👁 Consultez ce billet de blog ou la vignette du package lubridate, qui explique succintement comment utiliser ce package.\n\nInstallez et chargez le package lubridate.\nTransformez le tableau alimRA_entr en modifiant la classe de dateCreationEtablissement à l’aide d’une fonction de lubridate.\nAjoutez une variable annee au tableau alimRA_entr à l’aide, à nouveau, d’une des fonctions de lubridate.\n\n\n\n\n\nCréez une table alimRA_typeAn qui recense le **nombre d’entreprises par année (nInAn), et par type*année (nInTypeAn)**.\nFiltrez les données de alimRA_typeAn pour ne garder que les entreprises dont la création correspond aux années &gt;=1970.\n\n\n\n\n\nInstallez et chargez le package ggplot2\nRéalisez un graphique représentant l’évolution des proportions d’entreprises (par type) par année.\nRéalisez ce même graphique, mais en représentant le nombre de créations d’entreprises par année et par type, pour les 5 types comptant le plus de créations d’entreprises (au total)."
  },
  {
    "objectID": "DM.html#cartes",
    "href": "DM.html#cartes",
    "title": "DM",
    "section": "",
    "text": "Repartez de la table alim_entr pour en faire un objet de classe “sf”. Vous vous servirez pour cela des colonnes “longitude” et “latitude” et exclurez les entreprises pour lesquelles ces colonnes ne sont pas renseignées.\nRéalisez une carte montrant le semis de points correspondant aux boulangeries-pâtisseries.\nEssayez de représenter à travers cette carte l’année de création de l’entreprise (de la manière qui vous semblera la plus pertinente).\n\n\n\n\n\nTéléchargez le shapefile des limites de communes en France ici et filtrez pour ne garder que les départements considérés ci-dessus.\nJoignez aux communes les informations concernant les commerces (st_join()…) et calculez le nombre de commerces par commune.\nProduisez une carte montrant le nombre de commerces par commune. Vous aurez sans doute à retravailler l’échelle colorée…"
  },
  {
    "objectID": "organisation.html",
    "href": "organisation.html",
    "title": "ORGANISATION",
    "section": "",
    "text": "Abordés en séance 1:\n\nIntroduction\nObjets de base\nOpérateurs, fonctions, packages"
  },
  {
    "objectID": "organisation.html#seance1",
    "href": "organisation.html#seance1",
    "title": "ORGANISATION",
    "section": "",
    "text": "Abordés en séance 1:\n\nIntroduction\nObjets de base\nOpérateurs, fonctions, packages"
  },
  {
    "objectID": "organisation.html#dm1",
    "href": "organisation.html#dm1",
    "title": "ORGANISATION",
    "section": "🏠 DM 1",
    "text": "🏠 DM 1\nVous êtes désormais en mesure de faire la partie Mise en place"
  },
  {
    "objectID": "organisation.html#seance2",
    "href": "organisation.html#seance2",
    "title": "ORGANISATION",
    "section": "🏫 SEANCE 2",
    "text": "🏫 SEANCE 2\nAbordés en séance 2:\n\nWorkflow, projets, rapports\nTableaux de données"
  },
  {
    "objectID": "organisation.html#dm2",
    "href": "organisation.html#dm2",
    "title": "ORGANISATION",
    "section": "🏠 DM 2",
    "text": "🏠 DM 2\nVous êtes désormais en mesure de faire la partie manip_tableaux"
  },
  {
    "objectID": "organisation.html#seance3",
    "href": "organisation.html#seance3",
    "title": "ORGANISATION",
    "section": "🏫 SEANCE 3",
    "text": "🏫 SEANCE 3\nAbordés en séance 3:\n\nGraphiques\nProgrammation\nObjets spatiaux\nCartes"
  },
  {
    "objectID": "organisation.html#dm3",
    "href": "organisation.html#dm3",
    "title": "ORGANISATION",
    "section": "🏠 DM 3",
    "text": "🏠 DM 3\nVous êtes désormais en mesure de faire tout le reste à partir d’ici."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction 🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,\n\n\n\n\n👩‍🏫 Cours: Objets de base\n👨‍💻👩‍💻 Exos: exos_base: objets\n🎯 Objectifs :\n\nconnaître différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\nsavoir créer différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\ncomprendre ce qu’est le mode d’un vecteur ou d’une matrice (logique, numérique, caractère…)\nsavoir convertir un objet d’un type/mode à un autre\nsavoir accéder aux valeurs des objets via leur système d’indexation|\n\n\n\n\n👩‍🏫 Cours: Opérateurs, fonctions, packages\n👨‍💻👩‍💻 Exos: exos_base: opérateurs, fonctions, packages\n🎯 Objectifs :\n\nconnaître et savoir utiliser les opérateurs arithmétiques, logiques, et de comparaison\nsavoir utiliser une fonction\ncomprendre l’usage des arguments d’une fonction (nom, ordre, valeurs par défaut)\nsavoir rechercher des informations dans l’aide associée aux fonctions\n\n\n\n\n👩‍🏫 Cours: Workflow,projets, rapports\n👨‍💻👩‍💻 Exos: pas d’exos en classe\n🎯 Objectifs :\n\ncomprendre l’organisation et l’intérêt de travailler en projet\ncomprendre l’organisation et l’intérêt d’un rapport Rmarkdown\nsavoir intégrer des chunks de code R dans un rapport\ncomprendre comment tester le code des chunks depuis un document .Rmd\nsavoir paramétrer les chunks\n\n\n\n\n👩‍🏫 Cours: Tableaux de données\n👨‍💻👩‍💻 Exos: exos_tableaux\n🎯 Objectifs :\n\nsavoir lire un tableau de données\nconnaître le package dplyr pour la manipulation de tableaux de données\nsavoir sélectionner des colonnes à l’aide de select()\nsavoir filtrer les lignes à l’aide de filter()\nsavoir arranger l’ordre des lignes à l’aide de arrange()\nsavoir modifier/créer des colonnes à l’aide de mutate()\nsavoir résumer des tableaux à l’aide de summarise() et group_by()\n\n\n\n\n👩‍🏫 Cours: Graphiques\n👨‍💻👩‍💻 Exos: exos_graphiques\n🎯 Objectifs :\n\nconnaître le package ggplot2 pour la production de graphiques\nsavoir utiliser l’argument data, et l’argument mappingpour définir des esthétiques x et y\ncomprendre ce qu’est un geom et en explorer différents types\ncomprendre le mapping i.e. comment faire le lien entre une variable et une caractéristique graphique avec aes()\ncomprendre l’impact de l’esthétique appliquée au graphique vs appliquée à un geom\nsavoir créer différentes facettes d’un même graphique avec facet_grid() ou facet_wrap()\nsavoir étiqueter les axes d’un graphique avec labs()\nsavoir modifier les échelles d’un graphique à l’aide de scale_..._...()\nsavoir paramétrer les axes d’un graphique à l’aide des arguments labels, breaks, limits,…\nsavoir modifier l’allure générale du graphique avec theme_...()\nsavoir rajouter des informations notamment des informations statistiques\nsavoir superposer un modèle de régression via geom_smooth()\n\n\n\n\n👩‍🏫 Cours: Programmation\n👨‍💻👩‍💻 Exos:\n\ncréez une fonction salutation() qui prend comme argument d’entrée un prénom et renvoie en sortie la salutation “Bonjour xxx!” (remplacez xxx par le prénom bien sûr). =&gt; fonction paste() ou stringr::str_c() pour concaténer des chaînes de caractères.\nfaites en sorte que la valeur par défaut du prénom soit votre prénom : si on ne précise pas la valeur de l’argument, la fonction renvoie “Bonjour xxx!” avec xxx= votre prénom\nrajoutez un argument soir pour obtenir la salutation “Bonsoir xxx!” au lieu de “Bonjour xxx!” si soir=TRUE.\nFaites tourner cette fonction en boucle pour saluer d’un coup (par exemple) c(“Mathilde”,“Paul”,“Jeanne”,“Kevin”).\n\n🎯 Objectifs :\n\nsavoir créer une fonction\nsavoir construire une structure conditionnelle if\nsavoir itérer en construisant une boucle for\nsavoir itérer en programmation fonctionnelle en utilisant le package purrr\n\n\n\n\n👩‍🏫 Cours: Objets spatiaux\n👨‍💻👩‍💻 Exos:\n\nLisez le shapefile arrondissements (téléchargeable ici)\nCalculez les aires des arrondissements\nClassez la table d’attributs arrondissements par aire décroissante\nLisez la table lyon_equipements (disponible ici), transformez-la en objet sf\nRéunissez les polygones des arrondissements en un seul polygone délimitant la ville de Lyon\nRéalisez une jointure spatiale de lyon_equipements et arrondissements\nGardez dans lyon_equipements uniquement les équipements qui sont effectivement situés dans la ville de Lyon.\n\n🎯 Objectifs :\n\ncomprendre le principe des “simple features” (package sf)\nsavoir lire des données spatiales vectorielles\nconnaître quelques fonctions de base quant aux systèmes de coordonnées, projections et affichage des objets sf.\ncomprendre l’articulation entre sf, dplyr et ggplot2\n\n\n\n\n👩‍🏫 Cours: Cartes\n👨‍💻👩‍💻 Exos: à la suite de ce que vous avez fait précédemment:\n\nMontrez les équipements sur une carte\nRajoutez les polygones des arrondissements\nCalculez le nombre total d’équipements pour chaque arrondissement. Vous pourrez pour ce faire considérer lyon_equipements comme une simple table (st_drop_geometry()).\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements total pour chaque arrondissements.\nCalculez nrel, le nombre d’équipements par km2 pour chaque arrondissement (vous pouvez utiliser units::set_units() pour convertir l’aire à l’unité de votre choix)\nRéalisez une carte montrant la densité d’équipements pour les différents arrondissements\nCalculez le nombre d’équipements de chaque type pour chaque arrondissement.\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements de chaque type pour chaque arrondissement.\nCalculez nreltype le nombre d’équipements d’un type ramené au nombre total d’équipements de chaque arrondissement.\nMontrez sur une carte la densité d’équipements de type “petite_enfance” pour les arrondissements de Lyon\n\n🎯 Objectifs :\n\ncomprendre le principe du package tmap\nsavoir créer des cartes statiques ou dynamiques\nsavoir utiliser tm_shape() et tm_…() en fonction de l’objet sf considéré\nsavoir ajouter/changer/retirer la basemap\ncomprendre comment paramétrer ses cartes\n\n\n👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction 🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,\n\n\n👩‍🏫 Cours: Objets de base\n👨‍💻👩‍💻 Exos: exos_base: objets\n🎯 Objectifs :\n\nconnaître différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\nsavoir créer différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\ncomprendre ce qu’est le mode d’un vecteur ou d’une matrice (logique, numérique, caractère…)\nsavoir convertir un objet d’un type/mode à un autre\nsavoir accéder aux valeurs des objets via leur système d’indexation|\n\n\n👩‍🏫 Cours: Opérateurs, fonctions, packages\n👨‍💻👩‍💻 Exos: exos_base: opérateurs, fonctions, packages\n🎯 Objectifs :\n\nconnaître et savoir utiliser les opérateurs arithmétiques, logiques, et de comparaison\nsavoir utiliser une fonction\ncomprendre l’usage des arguments d’une fonction (nom, ordre, valeurs par défaut)\nsavoir rechercher des informations dans l’aide associée aux fonctions\n\n\n👩‍🏫 Cours: Workflow,projets, rapports\n👨‍💻👩‍💻 Exos: pas d’exos en classe\n🎯 Objectifs :\n\ncomprendre l’organisation et l’intérêt de travailler en projet\ncomprendre l’organisation et l’intérêt d’un rapport Rmarkdown\nsavoir intégrer des chunks de code R dans un rapport\ncomprendre comment tester le code des chunks depuis un document .Rmd\nsavoir paramétrer les chunks\n\n\n👩‍🏫 Cours: Tableaux de données\n👨‍💻👩‍💻 Exos: exos_tableaux\n🎯 Objectifs :\n\nsavoir lire un tableau de données\nconnaître le package dplyr pour la manipulation de tableaux de données\nsavoir sélectionner des colonnes à l’aide de select()\nsavoir filtrer les lignes à l’aide de filter()\nsavoir arranger l’ordre des lignes à l’aide de arrange()\nsavoir modifier/créer des colonnes à l’aide de mutate()\nsavoir résumer des tableaux à l’aide de summarise() et group_by()\n\n\n👩‍🏫 Cours: Graphiques\n👨‍💻👩‍💻 Exos: exos_graphiques\n🎯 Objectifs :\n\nconnaître le package ggplot2 pour la production de graphiques\nsavoir utiliser l’argument data, et l’argument mappingpour définir des esthétiques x et y\ncomprendre ce qu’est un geom et en explorer différents types\ncomprendre le mapping i.e. comment faire le lien entre une variable et une caractéristique graphique avec aes()\ncomprendre l’impact de l’esthétique appliquée au graphique vs appliquée à un geom\nsavoir créer différentes facettes d’un même graphique avec facet_grid() ou facet_wrap()\nsavoir étiqueter les axes d’un graphique avec labs()\nsavoir modifier les échelles d’un graphique à l’aide de scale_..._...()\nsavoir paramétrer les axes d’un graphique à l’aide des arguments labels, breaks, limits,…\nsavoir modifier l’allure générale du graphique avec theme_...()\nsavoir rajouter des informations notamment des informations statistiques\nsavoir superposer un modèle de régression via geom_smooth()\n\n\n👩‍🏫 Cours: Programmation\n👨‍💻👩‍💻 Exos:\n\ncréez une fonction salutation() qui prend comme argument d’entrée un prénom et renvoie en sortie la salutation “Bonjour xxx!” (remplacez xxx par le prénom bien sûr). =&gt; fonction paste() ou stringr::str_c() pour concaténer des chaînes de caractères.\nfaites en sorte que la valeur par défaut du prénom soit votre prénom : si on ne précise pas la valeur de l’argument, la fonction renvoie “Bonjour xxx!” avec xxx= votre prénom\nrajoutez un argument soir pour obtenir la salutation “Bonsoir xxx!” au lieu de “Bonjour xxx!” si soir=TRUE.\nFaites tourner cette fonction en boucle pour saluer d’un coup (par exemple) c(“Mathilde”,“Paul”,“Jeanne”,“Kevin”).\n\n🎯 Objectifs :\n\nsavoir créer une fonction\nsavoir construire une structure conditionnelle if\nsavoir itérer en construisant une boucle for\nsavoir itérer en programmation fonctionnelle en utilisant le package purrr\n\n\n👩‍🏫 Cours: Objets spatiaux\n👨‍💻👩‍💻 Exos:\n\nLisez le shapefile arrondissements (téléchargeable ici)\nCalculez les aires des arrondissements\nClassez la table d’attributs arrondissements par aire décroissante\nLisez la table lyon_equipements (disponible ici), transformez-la en objet sf\nRéunissez les polygones des arrondissements en un seul polygone délimitant la ville de Lyon\nRéalisez une jointure spatiale de lyon_equipements et arrondissements\nGardez dans lyon_equipements uniquement les équipements qui sont effectivement situés dans la ville de Lyon.\n\n🎯 Objectifs :\n\ncomprendre le principe des “simple features” (package sf)\nsavoir lire des données spatiales vectorielles\nconnaître quelques fonctions de base quant aux systèmes de coordonnées, projections et affichage des objets sf.\ncomprendre l’articulation entre sf, dplyr et ggplot2\n\n\n👩‍🏫 Cours: Cartes\n👨‍💻👩‍💻 Exos: à la suite de ce que vous avez fait précédemment:\n\nMontrez les équipements sur une carte\nRajoutez les polygones des arrondissements\nCalculez le nombre total d’équipements pour chaque arrondissement. Vous pourrez pour ce faire considérer lyon_equipements comme une simple table (st_drop_geometry()).\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements total pour chaque arrondissements.\nCalculez nrel, le nombre d’équipements par km2 pour chaque arrondissement (vous pouvez utiliser units::set_units() pour convertir l’aire à l’unité de votre choix)\nRéalisez une carte montrant la densité d’équipements pour les différents arrondissements\nCalculez le nombre d’équipements de chaque type pour chaque arrondissement.\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements de chaque type pour chaque arrondissement.\nCalculez nreltype le nombre d’équipements d’un type ramené au nombre total d’équipements de chaque arrondissement.\nMontrez sur une carte la densité d’équipements de type “petite_enfance” pour les arrondissements de Lyon\n\n🎯 Objectifs :\n\ncomprendre le principe du package tmap\nsavoir créer des cartes statiques ou dynamiques\nsavoir utiliser tm_shape() et tm_…() en fonction de l’objet sf considéré\nsavoir ajouter/changer/retirer la basemap\ncomprendre comment paramétrer ses cartes"
  },
  {
    "objectID": "about.html#intro",
    "href": "about.html#intro",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction 🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,"
  },
  {
    "objectID": "about.html#objets_de_base",
    "href": "about.html#objets_de_base",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Objets de base\n👨‍💻👩‍💻 Exos: exos_base: objets\n🎯 Objectifs :\n\nconnaître différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\nsavoir créer différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\ncomprendre ce qu’est le mode d’un vecteur ou d’une matrice (logique, numérique, caractère…)\nsavoir convertir un objet d’un type/mode à un autre\nsavoir accéder aux valeurs des objets via leur système d’indexation|"
  },
  {
    "objectID": "about.html#operateurs_fonctions_packages",
    "href": "about.html#operateurs_fonctions_packages",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Opérateurs, fonctions, packages\n👨‍💻👩‍💻 Exos: exos_base: opérateurs, fonctions, packages\n🎯 Objectifs :\n\nconnaître et savoir utiliser les opérateurs arithmétiques, logiques, et de comparaison\nsavoir utiliser une fonction\ncomprendre l’usage des arguments d’une fonction (nom, ordre, valeurs par défaut)\nsavoir rechercher des informations dans l’aide associée aux fonctions"
  },
  {
    "objectID": "about.html#workflow_projets_rapports",
    "href": "about.html#workflow_projets_rapports",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Workflow,projets, rapports\n👨‍💻👩‍💻 Exos: pas d’exos en classe\n🎯 Objectifs :\n\ncomprendre l’organisation et l’intérêt de travailler en projet\ncomprendre l’organisation et l’intérêt d’un rapport Rmarkdown\nsavoir intégrer des chunks de code R dans un rapport\ncomprendre comment tester le code des chunks depuis un document .Rmd\nsavoir paramétrer les chunks"
  },
  {
    "objectID": "about.html#tableaux_de_donnees",
    "href": "about.html#tableaux_de_donnees",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Tableaux de données\n👨‍💻👩‍💻 Exos: exos_tableaux\n🎯 Objectifs :\n\nsavoir lire un tableau de données\nconnaître le package dplyr pour la manipulation de tableaux de données\nsavoir sélectionner des colonnes à l’aide de select()\nsavoir filtrer les lignes à l’aide de filter()\nsavoir arranger l’ordre des lignes à l’aide de arrange()\nsavoir modifier/créer des colonnes à l’aide de mutate()\nsavoir résumer des tableaux à l’aide de summarise() et group_by()"
  },
  {
    "objectID": "about.html#graphiques",
    "href": "about.html#graphiques",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Graphiques\n👨‍💻👩‍💻 Exos: exos_graphiques\n🎯 Objectifs :\n\nconnaître le package ggplot2 pour la production de graphiques\nsavoir utiliser l’argument data, et l’argument mappingpour définir des esthétiques x et y\ncomprendre ce qu’est un geom et en explorer différents types\ncomprendre le mapping i.e. comment faire le lien entre une variable et une caractéristique graphique avec aes()\ncomprendre l’impact de l’esthétique appliquée au graphique vs appliquée à un geom\nsavoir créer différentes facettes d’un même graphique avec facet_grid() ou facet_wrap()\nsavoir étiqueter les axes d’un graphique avec labs()\nsavoir modifier les échelles d’un graphique à l’aide de scale_..._...()\nsavoir paramétrer les axes d’un graphique à l’aide des arguments labels, breaks, limits,…\nsavoir modifier l’allure générale du graphique avec theme_...()\nsavoir rajouter des informations notamment des informations statistiques\nsavoir superposer un modèle de régression via geom_smooth()"
  },
  {
    "objectID": "about.html#programmation",
    "href": "about.html#programmation",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Programmation\n👨‍💻👩‍💻 Exos:\n\ncréez une fonction salutation() qui prend comme argument d’entrée un prénom et renvoie en sortie la salutation “Bonjour xxx!” (remplacez xxx par le prénom bien sûr). =&gt; fonction paste() ou stringr::str_c() pour concaténer des chaînes de caractères.\nfaites en sorte que la valeur par défaut du prénom soit votre prénom : si on ne précise pas la valeur de l’argument, la fonction renvoie “Bonjour xxx!” avec xxx= votre prénom\nrajoutez un argument soir pour obtenir la salutation “Bonsoir xxx!” au lieu de “Bonjour xxx!” si soir=TRUE.\nFaites tourner cette fonction en boucle pour saluer d’un coup (par exemple) c(“Mathilde”,“Paul”,“Jeanne”,“Kevin”).\n\n🎯 Objectifs :\n\nsavoir créer une fonction\nsavoir construire une structure conditionnelle if\nsavoir itérer en construisant une boucle for\nsavoir itérer en programmation fonctionnelle en utilisant le package purrr"
  },
  {
    "objectID": "about.html#objets_spatiaux",
    "href": "about.html#objets_spatiaux",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Objets spatiaux\n👨‍💻👩‍💻 Exos:\n\nLisez le shapefile arrondissements (téléchargeable ici)\nCalculez les aires des arrondissements\nClassez la table d’attributs arrondissements par aire décroissante\nLisez la table lyon_equipements (disponible ici), transformez-la en objet sf\nRéunissez les polygones des arrondissements en un seul polygone délimitant la ville de Lyon\nRéalisez une jointure spatiale de lyon_equipements et arrondissements\nGardez dans lyon_equipements uniquement les équipements qui sont effectivement situés dans la ville de Lyon.\n\n🎯 Objectifs :\n\ncomprendre le principe des “simple features” (package sf)\nsavoir lire des données spatiales vectorielles\nconnaître quelques fonctions de base quant aux systèmes de coordonnées, projections et affichage des objets sf.\ncomprendre l’articulation entre sf, dplyr et ggplot2"
  },
  {
    "objectID": "about.html#cartes",
    "href": "about.html#cartes",
    "title": "Contenu",
    "section": "",
    "text": "👩‍🏫 Cours: Cartes\n👨‍💻👩‍💻 Exos: à la suite de ce que vous avez fait précédemment:\n\nMontrez les équipements sur une carte\nRajoutez les polygones des arrondissements\nCalculez le nombre total d’équipements pour chaque arrondissement. Vous pourrez pour ce faire considérer lyon_equipements comme une simple table (st_drop_geometry()).\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements total pour chaque arrondissements.\nCalculez nrel, le nombre d’équipements par km2 pour chaque arrondissement (vous pouvez utiliser units::set_units() pour convertir l’aire à l’unité de votre choix)\nRéalisez une carte montrant la densité d’équipements pour les différents arrondissements\nCalculez le nombre d’équipements de chaque type pour chaque arrondissement.\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements de chaque type pour chaque arrondissement.\nCalculez nreltype le nombre d’équipements d’un type ramené au nombre total d’équipements de chaque arrondissement.\nMontrez sur une carte la densité d’équipements de type “petite_enfance” pour les arrondissements de Lyon\n\n🎯 Objectifs :\n\ncomprendre le principe du package tmap\nsavoir créer des cartes statiques ou dynamiques\nsavoir utiliser tm_shape() et tm_…() en fonction de l’objet sf considéré\nsavoir ajouter/changer/retirer la basemap\ncomprendre comment paramétrer ses cartes\n\n\n👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction 🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,\n\n\n👩‍🏫 Cours: Objets de base\n👨‍💻👩‍💻 Exos: exos_base: objets\n🎯 Objectifs :\n\nconnaître différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\nsavoir créer différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\ncomprendre ce qu’est le mode d’un vecteur ou d’une matrice (logique, numérique, caractère…)\nsavoir convertir un objet d’un type/mode à un autre\nsavoir accéder aux valeurs des objets via leur système d’indexation|\n\n\n👩‍🏫 Cours: Opérateurs, fonctions, packages\n👨‍💻👩‍💻 Exos: exos_base: opérateurs, fonctions, packages\n🎯 Objectifs :\n\nconnaître et savoir utiliser les opérateurs arithmétiques, logiques, et de comparaison\nsavoir utiliser une fonction\ncomprendre l’usage des arguments d’une fonction (nom, ordre, valeurs par défaut)\nsavoir rechercher des informations dans l’aide associée aux fonctions\n\n\n👩‍🏫 Cours: Workflow,projets, rapports\n👨‍💻👩‍💻 Exos: pas d’exos en classe\n🎯 Objectifs :\n\ncomprendre l’organisation et l’intérêt de travailler en projet\ncomprendre l’organisation et l’intérêt d’un rapport Rmarkdown\nsavoir intégrer des chunks de code R dans un rapport\ncomprendre comment tester le code des chunks depuis un document .Rmd\nsavoir paramétrer les chunks\n\n\n👩‍🏫 Cours: Tableaux de données\n👨‍💻👩‍💻 Exos: exos_tableaux\n🎯 Objectifs :\n\nsavoir lire un tableau de données\nconnaître le package dplyr pour la manipulation de tableaux de données\nsavoir sélectionner des colonnes à l’aide de select()\nsavoir filtrer les lignes à l’aide de filter()\nsavoir arranger l’ordre des lignes à l’aide de arrange()\nsavoir modifier/créer des colonnes à l’aide de mutate()\nsavoir résumer des tableaux à l’aide de summarise() et group_by()\n\n\n👩‍🏫 Cours: Graphiques\n👨‍💻👩‍💻 Exos: exos_graphiques\n🎯 Objectifs :\n\nconnaître le package ggplot2 pour la production de graphiques\nsavoir utiliser l’argument data, et l’argument mappingpour définir des esthétiques x et y\ncomprendre ce qu’est un geom et en explorer différents types\ncomprendre le mapping i.e. comment faire le lien entre une variable et une caractéristique graphique avec aes()\ncomprendre l’impact de l’esthétique appliquée au graphique vs appliquée à un geom\nsavoir créer différentes facettes d’un même graphique avec facet_grid() ou facet_wrap()\nsavoir étiqueter les axes d’un graphique avec labs()\nsavoir modifier les échelles d’un graphique à l’aide de scale_..._...()\nsavoir paramétrer les axes d’un graphique à l’aide des arguments labels, breaks, limits,…\nsavoir modifier l’allure générale du graphique avec theme_...()\nsavoir rajouter des informations notamment des informations statistiques\nsavoir superposer un modèle de régression via geom_smooth()\n\n\n👩‍🏫 Cours: Programmation\n👨‍💻👩‍💻 Exos:\n\ncréez une fonction salutation() qui prend comme argument d’entrée un prénom et renvoie en sortie la salutation “Bonjour xxx!” (remplacez xxx par le prénom bien sûr). =&gt; fonction paste() ou stringr::str_c() pour concaténer des chaînes de caractères.\nfaites en sorte que la valeur par défaut du prénom soit votre prénom : si on ne précise pas la valeur de l’argument, la fonction renvoie “Bonjour xxx!” avec xxx= votre prénom\nrajoutez un argument soir pour obtenir la salutation “Bonsoir xxx!” au lieu de “Bonjour xxx!” si soir=TRUE.\nFaites tourner cette fonction en boucle pour saluer d’un coup (par exemple) c(“Mathilde”,“Paul”,“Jeanne”,“Kevin”).\n\n🎯 Objectifs :\n\nsavoir créer une fonction\nsavoir construire une structure conditionnelle if\nsavoir itérer en construisant une boucle for\nsavoir itérer en programmation fonctionnelle en utilisant le package purrr\n\n\n👩‍🏫 Cours: Objets spatiaux\n👨‍💻👩‍💻 Exos:\n\nLisez le shapefile arrondissements (téléchargeable ici)\nCalculez les aires des arrondissements\nClassez la table d’attributs arrondissements par aire décroissante\nLisez la table lyon_equipements (disponible ici), transformez-la en objet sf\nRéunissez les polygones des arrondissements en un seul polygone délimitant la ville de Lyon\nRéalisez une jointure spatiale de lyon_equipements et arrondissements\nGardez dans lyon_equipements uniquement les équipements qui sont effectivement situés dans la ville de Lyon.\n\n🎯 Objectifs :\n\ncomprendre le principe des “simple features” (package sf)\nsavoir lire des données spatiales vectorielles\nconnaître quelques fonctions de base quant aux systèmes de coordonnées, projections et affichage des objets sf.\ncomprendre l’articulation entre sf, dplyr et ggplot2\n\n\n👩‍🏫 Cours: Cartes\n👨‍💻👩‍💻 Exos: à la suite de ce que vous avez fait précédemment:\n\nMontrez les équipements sur une carte\nRajoutez les polygones des arrondissements\nCalculez le nombre total d’équipements pour chaque arrondissement. Vous pourrez pour ce faire considérer lyon_equipements comme une simple table (st_drop_geometry()).\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements total pour chaque arrondissements.\nCalculez nrel, le nombre d’équipements par km2 pour chaque arrondissement (vous pouvez utiliser units::set_units() pour convertir l’aire à l’unité de votre choix)\nRéalisez une carte montrant la densité d’équipements pour les différents arrondissements\nCalculez le nombre d’équipements de chaque type pour chaque arrondissement.\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements de chaque type pour chaque arrondissement.\nCalculez nreltype le nombre d’équipements d’un type ramené au nombre total d’équipements de chaque arrondissement.\nMontrez sur une carte la densité d’équipements de type “petite_enfance” pour les arrondissements de Lyon\n\n🎯 Objectifs :\n\ncomprendre le principe du package tmap\nsavoir créer des cartes statiques ou dynamiques\nsavoir utiliser tm_shape() et tm_…() en fonction de l’objet sf considéré\nsavoir ajouter/changer/retirer la basemap\ncomprendre comment paramétrer ses cartes"
  },
  {
    "objectID": "contenu.html",
    "href": "contenu.html",
    "title": "CONTENU",
    "section": "",
    "text": "👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction\n🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,"
  },
  {
    "objectID": "contenu.html#intro",
    "href": "contenu.html#intro",
    "title": "CONTENU",
    "section": "",
    "text": "👩‍🏫 Cours: Introduction\n👨‍💻👩‍💻 Exos: exos_base: introduction\n🎯Objectifs :\n\ncomprendre l’intérêt et l’usage de R et de ses packages\ncomprendre l’intérêt et l’usage de RStudio\ncomprendre ce que sont un objet, un environnement et une ligne de commande,\ncomprendre la distinction entre script et console,"
  },
  {
    "objectID": "contenu.html#objets_de_base",
    "href": "contenu.html#objets_de_base",
    "title": "CONTENU",
    "section": "Objets de base",
    "text": "Objets de base\n👩‍🏫 Cours: Objets de base\n👨‍💻👩‍💻 Exos: exos_base: objets\n🎯 Objectifs :\n\nconnaître différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\nsavoir créer différents types d’objets (vecteurs, facteurs, listes, tableaux de données…)\ncomprendre ce qu’est le mode d’un vecteur ou d’une matrice (logique, numérique, caractère…)\nsavoir convertir un objet d’un type/mode à un autre\nsavoir accéder aux valeurs des objets via leur système d’indexation|"
  },
  {
    "objectID": "contenu.html#operateurs_fonctions_packages",
    "href": "contenu.html#operateurs_fonctions_packages",
    "title": "CONTENU",
    "section": "Opérateurs, fonctions, packages",
    "text": "Opérateurs, fonctions, packages\n👩‍🏫 Cours: Opérateurs, fonctions, packages\n👨‍💻👩‍💻 Exos: exos_base: opérateurs, fonctions, packages\n🎯 Objectifs :\n\nconnaître et savoir utiliser les opérateurs arithmétiques, logiques, et de comparaison\nsavoir utiliser une fonction\ncomprendre l’usage des arguments d’une fonction (nom, ordre, valeurs par défaut)\nsavoir rechercher des informations dans l’aide associée aux fonctions"
  },
  {
    "objectID": "contenu.html#workflow_projets_rapports",
    "href": "contenu.html#workflow_projets_rapports",
    "title": "CONTENU",
    "section": "Workflow, projets, rapports",
    "text": "Workflow, projets, rapports\n👩‍🏫 Cours: Workflow,projets, rapports\n👨‍💻👩‍💻 Exos: pas d’exos en classe\n🎯 Objectifs :\n\ncomprendre l’organisation et l’intérêt de travailler en projet\ncomprendre l’organisation et l’intérêt d’un rapport Rmarkdown\nsavoir intégrer des chunks de code R dans un rapport\ncomprendre comment tester le code des chunks depuis un document .Rmd\nsavoir paramétrer les chunks"
  },
  {
    "objectID": "contenu.html#tableaux_de_donnees",
    "href": "contenu.html#tableaux_de_donnees",
    "title": "CONTENU",
    "section": "Tableaux de données",
    "text": "Tableaux de données\n👩‍🏫 Cours: Tableaux de données\n👨‍💻👩‍💻 Exos: exos_tableaux\n🎯 Objectifs :\n\nsavoir lire un tableau de données\nconnaître le package dplyr pour la manipulation de tableaux de données\nsavoir sélectionner des colonnes à l’aide de select()\nsavoir filtrer les lignes à l’aide de filter()\nsavoir arranger l’ordre des lignes à l’aide de arrange()\nsavoir modifier/créer des colonnes à l’aide de mutate()\nsavoir résumer des tableaux à l’aide de summarise() et group_by()"
  },
  {
    "objectID": "contenu.html#graphiques",
    "href": "contenu.html#graphiques",
    "title": "CONTENU",
    "section": "Graphiques",
    "text": "Graphiques\n👩‍🏫 Cours: Graphiques\n👨‍💻👩‍💻 Exos: exos_graphiques\n🎯 Objectifs :\n\nconnaître le package ggplot2 pour la production de graphiques\nsavoir utiliser l’argument data, et l’argument mappingpour définir des esthétiques x et y\ncomprendre ce qu’est un geom et en explorer différents types\ncomprendre le mapping i.e. comment faire le lien entre une variable et une caractéristique graphique avec aes()\ncomprendre l’impact de l’esthétique appliquée au graphique vs appliquée à un geom\nsavoir créer différentes facettes d’un même graphique avec facet_grid() ou facet_wrap()\nsavoir étiqueter les axes d’un graphique avec labs()\nsavoir modifier les échelles d’un graphique à l’aide de scale_..._...()\nsavoir paramétrer les axes d’un graphique à l’aide des arguments labels, breaks, limits,…\nsavoir modifier l’allure générale du graphique avec theme_...()\nsavoir rajouter des informations notamment des informations statistiques\nsavoir superposer un modèle de régression via geom_smooth()"
  },
  {
    "objectID": "contenu.html#programmation",
    "href": "contenu.html#programmation",
    "title": "CONTENU",
    "section": "Programmation",
    "text": "Programmation\n👩‍🏫 Cours: Programmation\n👨‍💻👩‍💻 Exos:\n\ncréez une fonction salutation() qui prend comme argument d’entrée un prénom et renvoie en sortie la salutation “Bonjour xxx!” (remplacez xxx par le prénom bien sûr). =&gt; fonction paste() ou stringr::str_c() pour concaténer des chaînes de caractères.\nfaites en sorte que la valeur par défaut du prénom soit votre prénom : si on ne précise pas la valeur de l’argument, la fonction renvoie “Bonjour xxx!” avec xxx= votre prénom\nrajoutez un argument soir pour obtenir la salutation “Bonsoir xxx!” au lieu de “Bonjour xxx!” si soir=TRUE.\nFaites tourner cette fonction en boucle pour saluer d’un coup (par exemple) c(“Mathilde”,“Paul”,“Jeanne”,“Kevin”).\n\n🎯 Objectifs :\n\nsavoir créer une fonction\nsavoir construire une structure conditionnelle if\nsavoir itérer en construisant une boucle for\nsavoir itérer en programmation fonctionnelle en utilisant le package purrr"
  },
  {
    "objectID": "contenu.html#objets_spatiaux",
    "href": "contenu.html#objets_spatiaux",
    "title": "CONTENU",
    "section": "Objets spatiaux",
    "text": "Objets spatiaux\n👩‍🏫 Cours: Objets spatiaux\n👨‍💻👩‍💻 Exos:\n\nLisez le shapefile arrondissements (téléchargeable ici)\nCalculez les aires des arrondissements\nClassez la table d’attributs arrondissements par aire décroissante\nLisez la table lyon_equipements (disponible ici), transformez-la en objet sf\nRéunissez les polygones des arrondissements en un seul polygone délimitant la ville de Lyon\nRéalisez une jointure spatiale de lyon_equipements et arrondissements\nGardez dans lyon_equipements uniquement les équipements qui sont effectivement situés dans la ville de Lyon.\n\n🎯 Objectifs :\n\ncomprendre le principe des “simple features” (package sf)\nsavoir lire des données spatiales vectorielles\nconnaître quelques fonctions de base quant aux systèmes de coordonnées, projections et affichage des objets sf.\ncomprendre l’articulation entre sf, dplyr et ggplot2"
  },
  {
    "objectID": "contenu.html#cartes",
    "href": "contenu.html#cartes",
    "title": "CONTENU",
    "section": "Cartes",
    "text": "Cartes\n👩‍🏫 Cours: Cartes\n👨‍💻👩‍💻 Exos: à la suite de ce que vous avez fait précédemment:\n\nMontrez les équipements sur une carte\nRajoutez les polygones des arrondissements\nCalculez le nombre total d’équipements pour chaque arrondissement. Vous pourrez pour ce faire considérer lyon_equipements comme une simple table (st_drop_geometry()).\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements total pour chaque arrondissements.\nCalculez nrel, le nombre d’équipements par km2 pour chaque arrondissement (vous pouvez utiliser units::set_units() pour convertir l’aire à l’unité de votre choix)\nRéalisez une carte montrant la densité d’équipements pour les différents arrondissements\nCalculez le nombre d’équipements de chaque type pour chaque arrondissement.\nRéalisez une jointure (non spatiale) pour disposer du nombre d’équipements de chaque type pour chaque arrondissement.\nCalculez nreltype le nombre d’équipements d’un type ramené au nombre total d’équipements de chaque arrondissement.\nMontrez sur une carte la densité d’équipements de type “petite_enfance” pour les arrondissements de Lyon\n\n🎯 Objectifs :\n\ncomprendre le principe du package tmap\nsavoir créer des cartes statiques ou dynamiques\nsavoir utiliser tm_shape() et tm_…() en fonction de l’objet sf considéré\nsavoir ajouter/changer/retirer la basemap\ncomprendre comment paramétrer ses cartes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R pour les GeoSentiNum",
    "section": "",
    "text": "Ce site présente les contenus et attentes liés au cours R pour les M1 GeoNum + M2 Sentinelles.\n\nCONTENU présente le contenu des cours, détaille les aspects abordés et les objectifs associés à chacune des sous-parties du cours.\nORGANISATION présente la manière dont seront organisées les séances (alternance cours + TD, réalisation du DM).\nDM présente le sujet du devoir maison en détaillant les étapes des traitements et résultats attendus."
  }
]